# Intuition
Given a circular route with gas stations at different points, each station has a certain amount of gas, and you need to find the starting gas station index from where you can complete the loop without running out of gas

 # Approach
The approach used in the provided code is the greedy algorithm.

Initialize total_gas and current_gas to 0, and s_index (starting index) to 0.
Iterate through each gas station.
At each station, calculate the remaining gas after traveling to the next station (current_gas += gas[i] - cost[i]).
If the current gas becomes negative, reset current_gas to 0 and update s_index to the next station (s_index = i + 1), because if you start from a gas station
A, and at some subsequent station
B you find that your gas level becomes negative, it means that every station from A to B (inclusive) cannot be a valid starting point.
While looping through the stations, also keep track of the total gas obtained (total_gas += gas[i] - cost[i]).
At the end of the loop, if total_gas is greater than or equal to 0, return s_index as the starting index; otherwise, return -1 indicating that it's not possible to complete the circuit.
Complexity
# Time complexity:
The time complexity would be O(n) , where n is total number of gas stations and cost
# Code
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        
        total_gas,current_gas=0,0
        s_index=0
        for i in range(len(gas)):

            current_gas+=gas[i]-cost[i]

            total_gas+=gas[i]-cost[i]
            if current_gas<0:

                current_gas=0
                #if current index is negative starting from next station
                
                s_index=i+1
        return s_index if total_gas>=0 else -1
